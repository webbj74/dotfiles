##
# Setup stuff for dotfiles scripts
#
function dotfiles_init {
    # DOTFILES GLOBALS
    DOTFILES_RC="${HOME}/.dotfilesrc"
    DOTFILES_DIRS=("common")

    load_dotfiles_config || return 1

    DOTFILES_DIRS=("${DOTFILES_DIRS[@]}" "${DOTFILES_MACHINE}")
    return 0
}

##
# Load the config if it exists and has been reasonably modified.
#
function load_dotfiles_config {
    local DOTFILES_RC_DIST="${SCRIPT_ETC}/dotfilesrc"

    if [ ! -f "${DOTFILES_RC}" ]; then
        echo "Creating ${DOTFILES_RC} with defaults:"
        cp -v "${DOTFILES_RC_DIST}" "${DOTFILES_RC}"
        echo "Stopping so you can edit ${DOTFILES_RC}"
        return 1
    fi

    if grep '^DOTFILES_EMAIL="test@example.com"' "${DOTFILES_RC}" 2>&1 > /dev/null; then
        echo "Stopping so you can edit ${DOTFILES_RC} (found default DOTFILES_EMAIL)"
        return 1
    fi

    if grep '^DOTFILES_REALNAME="Automated Testing"' "${DOTFILES_RC}" 2>&1 > /dev/null; then
        echo "Stopping so you can edit ${DOTFILES_RC} (found default DOTFILES_REALNAME)"
        return 1
    fi

    if grep '^DOTFILES_GITHUBBER="example"' "${DOTFILES_RC}" 2>&1 > /dev/null; then
        echo "Stopping so you can edit ${DOTFILES_RC} (found default DOTFILES_GITHUBBER)"
        return 1
    fi

    source "${DOTFILES_RC}"

    return 0
}

##
# Output a dotfiles header
#
function dotfiles_header {
    local commentString="$1"
    if [ -z "${commentString}" ]; then
        commentString="#"
    fi
    echo "${commentString}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo "${commentString}"
    echo "${commentString}  * * *      DO NOT EDIT THIS FILE DIRECTLY      * * *"
    echo "${commentString}"
    echo "${commentString}  CONTENTS MANAGED BY ${SCRIPT_ROOT}"
    echo "${commentString}"
    echo "${commentString}  Last update: $(date -u +%FT%T%z)"
    echo "${commentString}"
    echo "${commentString}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo ""
}

function recreate_dotfile {
    local basefile="$1"
    local dotfile="${HOME}/.${basefile}"
    local i=0

    scriptMessage "Recreating ${dotfile}"
    rm -v "${dotfile}"
    dotfiles_header >> "${dotfile}"

    for ((i=0; i<${#DOTFILES_DIRS[@]}; ++i)) do
        local dirDotfile="${SCRIPT_ROOT}/${DOTFILES_DIRS[$i]}/${basefile}"
        echo LL "${dirDotfile}"
        if [ -f "${dirDotfile}" ]; then
            msg="Appending to ${dotfile} from ${dirDotfile}"
            scriptMessage "${msg}"
            echo -e "\n# ${msg}\n" >> "${dotfile}"
            cat "${dirDotfile}" >> "${dotfile}"
        fi
    done
}

function dotfiles_source_nag {
    echo -e "Run the following command to make sure you have the latest stuff:\n"
    echo -e "    \001\x1B[38;5;93m\002source ~/.profile\001\x1B[0m\002"
}

dotfiles_init || exit 1
